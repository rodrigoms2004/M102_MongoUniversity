Optional Lab - Expressions with $project


This lab will have you work with data within arrays, a common operation.

Specifically, one of the arrays you'll work with is writers, from the movies collection.

There are times when we want to make sure that the field is an array, and that it is not empty. We can do this within $match


db.movies.aggregate([{ 
    $match: { writers: { $elemMatch: { $exists: true } } }
}])

However, the entries within writers presents another problem. A good amount of entries in writers 
look something like the following, where the writer is attributed with their specific contribution


db.movies.aggregate([{ 
    $match: { "writers" : [ "Vincenzo Cerami (story)", "Roberto Benigni (story)" ] }
}])


But the writer also appears in the cast array as "Roberto Benigni"!

Give it a look with the following query:

db.movies.findOne({title: "Life Is Beautiful"}, { _id: 0, cast: 1, writers: 1})
{
        "cast" : [
                "Roberto Benigni",
                "Nicoletta Braschi",
                "Giustino Durano",
                "Giorgio Cantarini"
        ],
        "writers" : [
                "Vincenzo Cerami (story)",
                "Roberto Benigni (story)"
        ]
}

This presents a problem, since comparing "Roberto Benigni" to "Roberto Benigni (story)" will definitely result in a difference.

Thankfully there is a powerful expression to help us, $map. $map lets us iterate over an array, element by element, 
performing some transformation on each element. The result of that transformation will be returned in the same place as the original element.

Within $map, the argument to input can be any expression as long as it resolves to an array. 
The argument to as is the name of the variable we want to use to refer to each element of the array when performing whatever logic we want. 
The field as is optional, and if omitted each element must be referred to as $$this:: The argument to in is the expression 
that is applied to each element of the input array, referenced with the variable name specified in as, and prepending two dollar signs:

writers: {
  $map: {
    input: "$writers",
    as: "writer",
    in: "$$writer"

in is where the work is performed. Here, we use the $arrayElemAt expression, which takes two arguments, 
the array and the index of the element we want. We use the $split expression, splitting the values on " (".

If the string did not contain the pattern specified, the only modification is it is wrapped in an array, so $arrayElemAt will always work



db.movies.aggregate([{ 
$project: {

writers: {
  $map: {
    input: "$writers",
    as: "writer",
    in: {
      $arrayElemAt: [
        {
          $split: [ "$$writer", " (" ]
        },
        0
      ]
    }
  }
}

}
}])


{ "_id" : ObjectId("573a1390f29313caabcd421c"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd4cf1"), "writers" : [ "Nils Krok", "Victor Sj�str�m" ] }
{ "_id" : ObjectId("573a1390f29313caabcd41f0"), "writers" : [ "George L. Du Maurier" ] }
{ "_id" : ObjectId("573a1390f29313caabcd414a"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd4135"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd4136"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd47f0"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd4386"), "writers" : [ "Charles Tait" ] }
{ "_id" : ObjectId("573a1390f29313caabcd43da"), "writers" : null }
{ "_id" : ObjectId("573a1390f29313caabcd45ec"), "writers" : [ "Mary Shelley", "J. Searle Dawley" ] }
{ "_id" : ObjectId("573a1390f29313caabcd458c"), "writers" : [ "Urban Gad" ] }
{ "_id" : ObjectId("573a1390f29313caabcd4961"), "writers" : [ "Victorien Sardou" ] }


#################################################################
#################################################################
#################################################################



Problem:

Let's find how many movies in our movies collection are a "labor of love", where the same person appears in cast, directors, and writers

Note that you may have a dataset that has duplicate entries for some films. Don't worry if you count them few times, 
meaning you should not try to find those duplicates.

To get a count after you have defined your pipeline, there are two simple methods.

// add the $count stage to the end of your pipeline
// you will learn about this stage shortly!
db.movies.aggregate([
  {$stage1},
  {$stage2},
  ...$stageN,
  { $count: "labors of love" }
])

// or use itcount()
db.movies.aggregate([
  {$stage1},
  {$stage2},
  {...$stageN},
]).itcount()

How many movies are "labors of love"?

#################################################################


db.movies.aggregate([{ 
    $match: { 
	    "writers" : { $elemMatch: { $exists: true } }, 
		"cast" : { $elemMatch: { $exists: true } },
		"directors" : { $elemMatch: { $exists: true } } 
		}
}, { 
    $project : {
	    "writers" : {
		    $map : { 
				input: "$writers",
                as: "writer",
                in: { 
				    $arrayElemAt: [
					    { $split: [ "$$writer", " (" ] },
                        0
                    ]}
			}
        },
		"cast" : 1,
	    "directors" : 1 
		}
}, { 
    $project: 
	    { "laborOfLove": { $gt: [ { $size: { $setIntersection: ["$writers", "$cast", "$directors"] } }, 0 ] } }
}, { 
    $match : { "laborOfLove" : true } 
}]).itcount()
    
#################################################################
Answer: 1597
#################################################################




